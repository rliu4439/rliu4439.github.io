{"version":3,"sources":["dog.jpg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","setValue","selectedFile","setSelectedFile","image","setImage","loading","setLoading","breed","setBreed","website","useEffect","fetch","method","then","response","text","className","style","color","type","onChange","event","target","files","reader","FileReader","onload","e","result","readAsDataURL","onClick","formData","FormData","append","axios","post","headers","status","data","console","log","src","fileData","showLoading","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAAe,ICiHAA,MA7Gf,WAAgB,IAAD,EACaC,mBAAS,YADtB,mBACCC,GADD,aAG2BD,qBAH3B,mBAGNE,EAHM,KAGQC,EAHR,OAIYH,qBAJZ,mBAIPI,EAJO,KAIAC,EAJA,OAKaL,qBALb,mBAKPM,EALO,KAKCC,EALD,OAMYP,qBANZ,mBAMNQ,EANM,KAMAC,EANA,KAOPC,EAAU,yCAiFhB,OA9EAC,qBAAU,WACRC,MAAM,IAAD,OAAKF,EAAL,KAAiB,CACpBG,OAAQ,QACPC,MAAK,SAACC,GACPA,EAASC,OAAOF,MAAK,SAACE,GACpBf,EAASe,WAGZ,IAuED,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,oBAAIC,MAAO,CAACC,MAAM,WAAlB,iCAEJ,iCACIjB,GAAgB,mEAER,uBAAOkB,KAAK,OAAOC,SA3EV,SAACC,GAGpB,GADAnB,EAAgBmB,EAAMC,OAAOC,MAAM,IAC/BF,EAAMC,OAAOC,OAASF,EAAMC,OAAOC,MAAM,GAAI,CAC/C,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAACC,GACfvB,EAASuB,EAAEL,OAAOM,SAEpBJ,EAAOK,cAAcR,EAAMC,OAAOC,MAAM,QAoEhC,wBAAQO,QA/DC,WAGnB,IAAMC,EAAW,IAAIC,SAGrBD,EAASE,OACP,QACAhC,GAGFK,GAAW,GACXE,EAAS,MAGT0B,IAAMC,KAAN,UAAc1B,EAAd,YAAiCsB,EAAS,CACxCK,QAAS,CACP,eAAgB,yBAEfvB,MAAM,SAACC,GACa,MAAlBA,EAASuB,QACV7B,EAASM,EAASwB,MAEpBhC,GAAW,GACXiC,QAAQC,IAAI1B,OAuCN,8BApCK,WAEf,GAAIb,EACF,OACE,gCACE,iDACA,qBAAKwC,IAAKtC,OAkCXuC,GA5Ba,WAClB,GAAGrC,EACH,MAAO,cA2BFsC,GACApC,GAAS,oBAAGqC,GAAG,WAAN,2BAAgCrC,EAAhC,aC/FLsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,aAM1BZ,M","file":"static/js/main.9a345186.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/dog.2fdbbeba.jpg\";","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport dog from './dog.jpg'\nfunction App() {\n  const [value, setValue] = useState(\"No Value\");\n  // const [apiValue, setApiValue] = useState(\"No API Value\");\n  const [selectedFile, setSelectedFile] = useState();\n  const[image, setImage] = useState();\n  const[loading,setLoading]=useState();\n  const [breed,setBreed] = useState();\n  const website = \"https://calm-sands-44768.herokuapp.com\";\n\n\n  useEffect(() => {\n    fetch(` ${website}/`, {\n      method: 'GET',\n    }).then((response) => {\n      response.text().then((text) => {\n        setValue(text);\n      })\n    })\n  }, []);\n    \n    // On file select (from the pop up)\n    const onFileChange = (event) => {\n      // Update the state\n      setSelectedFile(event.target.files[0] )  \n      if (event.target.files && event.target.files[0]) {\n        let reader = new FileReader();\n        reader.onload = (e) => {\n          setImage(e.target.result);\n        };\n        reader.readAsDataURL(event.target.files[0]);\n      }  \n    };\n    \n    // On file upload (click the upload button)\n    const onFileUpload = () => {\n    \n      // Create an object of formData\n      const formData = new FormData();\n    \n      // Update the formData object\n      formData.append(\n        \"image\",\n        selectedFile,\n      );\n    \n      setLoading(true);\n      setBreed(null);    \n      // Request made to the backend api\n      // Send formData object\n      axios.post(`${website}/predict`, formData,{\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n        }).then( (response) => {\n          if(response.status===200){\n            setBreed(response.data)\n          }\n          setLoading(false)\n          console.log(response);\n        });\n      };\n    const fileData = () => {\n    \n      if (selectedFile) {\n        return (\n          <div>\n            <h4>Selected Image:</h4>\n            <img src={image} />\n          </div>\n        );\n      } \n    };\n\n    const showLoading = () =>{\n      if(loading){\n      return \"Loading ...\"\n      }\n    }\n    //Doesn't work currently on sending img to server\n    // const clickImage1=()=>{\n    //   const res = fetch(dog).then((response)=>{\n    //    return response;\n    //   })\n    //   setSelectedFile(res)\n    //   setImage(dog)\n    //   console.log(\"clicked\")\n    //   onFileUpload()\n    // }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3 style={{color:'#fafafa'}}>Dog Breed Detection</h3>\n        {/* <img src={dog} onClick={clickImage1} /> */}\n    <div>\n      {!selectedFile && <p>Upload an image or select an image</p>}\n      \n                <input type=\"file\" onChange={onFileChange} />\n                <button onClick={onFileUpload}>\n                  Detect Breed!\n                </button>\n            </div>\n          {fileData()}\n          {showLoading()}\n          {breed && <p id=\"response\">This dog is a {breed}.</p>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('dogBreed')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}